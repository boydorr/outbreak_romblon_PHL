cases
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
newCases
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
newCases
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
newCases
newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases))
newCases
outbreak_df <- rbind(outbreak_df, newCases)
outbreak_df
today = 32
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
cases
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
newCases
nrow(newCases)
outbreak_df <- rbind(outbreak_df, newCases)
outbreak_df
today = 49
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
nrow(newCases)
(newCases)
newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases))
(newCases)
outbreak_df <- rbind(outbreak_df, newCases)
outbreak_df
today = 51
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
cases
today = 52
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
cases
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
(newCases)
today = 56
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
(newCases)
newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases))
(newCases)
outbreak_df <- rbind(outbreak_df, newCases)
outbreak_df
today = 68
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
cases
today = 69
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
cases
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
(newCases)
newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases))
(newCases)
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
(newCases)
newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases))
(newCases)
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
outbreak_df <- rbind(outbreak_df, newCases)
outbreak_df
today
which(outbreak_df$transD<69)
length(which(outbreak_df$transD<69))
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50)
test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50)
test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50)
test
#This script simulates an outbreak from when the first case of each lineage was
#introduced to when the lineage was detected to give an estimate of how many cases were
#circulating on Romblon in this time.
#R0 parameter values from Townsend et al., 2013
R0 = 1.20
dispersion = 1.33
#SI parameter values from Mancy et al., 2022
SI_meanlog <- 2.85
SI_sdlog <-  0.966
# rlnorm(100, meanlog = SI_meanlog, sdlog = SI_sdlog)
# Function to generate secondary cases
infect <- function(IDs, today, R0, dispersion, SI_meanlog, SI_sdlog){
offspring <- rnbinom(length(IDs), mu = R0, size = dispersion)
offspringTotal <- sum(offspring)
if(offspringTotal > 0){
for(j in 1:offspringTotal){
caseID <- 1:offspringTotal
parentID <- rep(IDs, offspring)
infD <- rep(today, offspringTotal)
transD <- today + rlnorm(offspringTotal, meanlog = SI_meanlog, sdlog = SI_sdlog)
}
} else {
parentID <- caseID <- infD <- transD <- c()
}
return(data.frame(caseID, parentID, infD, transD))
}
# TEST
# test <- infect(c(5,12,13), 25, R0, dispersion, SI_meanlog, SI_sdlog); nrow(test)
# Set up the secondary case simulation
outbreak_sim <- function(R0, dispersion, SI_meanlog, SI_sdlog, lastday) {
# Set up vectors to track events
outbreak_df <- data.frame(caseID = 1, parentID = 0, infD = 0, transD = 1) # set up outbreak dataframe
today <- 0
# loop thru every day
for(i in 1:lastday){
today <- today + 1
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
# If there are cases today generate new infections
if(nrow(cases)>0){
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
# If there are new cases the newCases$ID columnn needs updating
if(nrow(newCases > 0)){ newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases)) }
}
outbreak_df <- rbind(outbreak_df, newCases) # update outbreak dataframe
}
return(outbreak_df)
}
# TEST
set.seed(743)
# test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50)
set.seed(743)
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
set.seed(74)
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
set.seed(7)
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
set.seed(7)
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
dim(test)
whiich(test$transD<50)
which(test$transD<50)
set.seed(7)
# Set up vectors to track events
outbreak_df <- data.frame(caseID = 1, parentID = 0, infD = 0, transD = 1) # set up outbreak dataframe
today <- 0
today <- today + 1
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
# If there are cases today generate new infections
if(nrow(cases)>0){
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
# If there are new cases the newCases$ID columnn needs updating
if(nrow(newCases > 0)){ newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases)) }
}
outbreak_df <- rbind(outbreak_df, newCases) # update outbreak dataframe
}
today <- today + 1
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
# If there are cases today generate new infections
if(nrow(cases)>0){
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
# If there are new cases the newCases$ID columnn needs updating
if(nrow(newCases > 0)){ newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases)) }
}
outbreak_df <- rbind(outbreak_df, newCases) # update outbreak dataframe
outbreak_df
set.seed(7)
outbreak_df <- data.frame(caseID = 1, parentID = 0, infD = 0, transD = 1) # set up outbreak dataframe
today <- 0
today <- today + 1
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
today
cases
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
newCases
newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases))
outbreak_df <- rbind(outbreak_df, newCases) # update outbreak dataframe
outbreak_df
i=17
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
newCases
i=111
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
newCases
i=8
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
newCases
i=14
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
newCases
test
set.seed(7)
outbreak_sim <- function(R0, dispersion, SI_meanlog, SI_sdlog, lastday) {
# Set up vectors to track events
outbreak_df <- data.frame(caseID = 1, parentID = 0, infD = 0, transD = 1) # set up outbreak dataframe
today <- 0
# loop thru every day
for(i in 1:lastday){
today <- today + 1
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
# If there are cases today generate new infections
if(nrow(cases)>0){
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
# If there are new cases the newCases$ID columnn needs updating
if(nrow(newCases > 0)){ newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases)) }
}
outbreak_df <- rbind(outbreak_df, newCases) # update outbreak dataframe
}
return(outbreak_df)
}
# TEST
set.seed(7)
outbreak_df <- data.frame(caseID = 1, parentID = 0, infD = 0, transD = 1) # set up outbreak dataframe
today <- 0
outbreak_df
today
lastday = 50
today <- today + 1
today
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
cases
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
newCases
if(nrow(newCases > 0)){ newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases)) }
newCases
outbreak_df <- rbind(outbreak_df, newCases) # update outbreak dataframe
outbreak
outbreak_df
i=2
today <- today + 1
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
cases
cases
set.seed(7)
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
# Set up the secondary case simulation
outbreak_sim <- function(R0, dispersion, SI_meanlog, SI_sdlog, lastday) {
# Set up vectors to track events
outbreak_df <- data.frame(caseID = 1, parentID = 0, infD = 0, transD = 1) # set up outbreak dataframe
today <- 0
# loop thru every day
for(i in 1:lastday){
today <- today + 1
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
# If there are cases today generate new infections
if(nrow(cases)>0){
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
# If there are new cases the newCases$ID columnn needs updating
if(nrow(newCases > 0)){
newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases)) }
else {newCases$caseID <- c() }
}
outbreak_df <- rbind(outbreak_df, newCases) # update outbreak dataframe
}
return(outbreak_df)
}
# TEST
set.seed(7)
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
cases
newCases
newCases <- data.frame(caseID = c(), parentID = c(), infD = c(), transD = c())
newCases
outbreak_sim <- function(R0, dispersion, SI_meanlog, SI_sdlog, lastday) {
# Set up vectors to track events
outbreak_df <- data.frame(caseID = 1, parentID = 0, infD = 0, transD = 1) # set up outbreak dataframe
today <- 0
# loop thru every day
for(i in 1:lastday){
today <- today + 1
cases <- outbreak_df[which(round(outbreak_df$transD) == today),]
# If there are cases today generate new infections
if(nrow(cases)>0){
newCases <- infect(cases$caseID, today, R0, dispersion, SI_meanlog, SI_sdlog)
# If there are new cases the newCases$ID columnn needs updating
if(nrow(newCases > 0)){ newCases$caseID <-  max(outbreak_df$caseID) + (1:nrow(newCases)) }
} else { newCases <- data.frame(caseID = c(), parentID = c(), infD = c(), transD = c()) } # Make sure to replace newCases with an empty dataframe!
outbreak_df <- rbind(outbreak_df, newCases) # update outbreak dataframe
}
return(outbreak_df)
}
set.seed(7)
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
test <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, 50); test
# Set up N outbreak simulations that exceed the last day detection!
N <- 10 # 10 successful outbreaks
introductions <- 1 # for tracking introductions
outbreak_size <- c() # for tracking successful outbreak sizes
detectionD <- 100
# Plot outbreaks that persist too
par(mfrow = c(3,4))
while(length(outbreak_size) < N) { # simulate outbreaks until the correct number are reached!
outbreak <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, detectionD) # simulate
outbreak_stop <- max(outbreak$transD) # find last day of outbreak
print(outbreak_stop) # print!
if(outbreak_stop >= detectionD) { # if outbreak persistent record outbrea size and plot outbreak time series
outbreak_size <- c(outbreak_size, length(which(outbreak$infD < detectionD)))
hist(outbreak$infD, breaks = seq(0, detectionD + 40, 30), ylim = c(0,100), xlim = c(0, detectionD))
}
introductions <- introductions + 1 # increment introductions!
}
outbreak_df
outbreak
which(outbreak$transD <100)
outbreak <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, detectionD) # simulate
outbreak
outbreak <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, detectionD) # simulate
outbreak
outbreak <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, detectionD) # simulate
outbreak
outbreak_detected <- length(which(outbreak$transD >= detectionD)) # find out if detected
outbreak_detected
print(outbreak_detected) # print!
which(outbreak$infD < detectionD)
length(which(outbreak$infD < detectionD))
# Set up N outbreak simulations that exceed the last day detection!
N <- 10 # 10 successful outbreaks
introductions <- 1 # for tracking introductions
outbreak_size <- c() # for tracking successful outbreak sizes
detectionD <- 100
# Plot outbreaks that persist too
par(mfrow = c(3,4))
while(length(outbreak_size) < N) { # simulate outbreaks until the correct number are reached!
outbreak <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, detectionD) # simulate
outbreak_detected <- length(which(outbreak$transD >= detectionD)) # find out if detected
print(outbreak_detected) # print!
if(outbreak_detected > 0) { # if outbreak persistent record outbrea size and plot outbreak time series
outbreak_size <- c(outbreak_size, length(which(outbreak$infD < detectionD)))
hist(outbreak$infD, breaks = seq(0, detectionD + 40, 30), ylim = c(0,100), xlim = c(0, detectionD))
}
introductions <- introductions + 1 # increment introductions!
}
introductions
outbreak_size
mean(outbreak_size)
#cluster 1 (inc. lineages 1 and 5) ------------------------------------------
timeDiff1_5 = as.numeric(difftime(as.Date("2022-09-30"), #detection date of first case in lineage
as.Date("2021-07-28"), #tMRCA of lineage
units = "days"))
undetected <- function(N, R0, dispersion, SI_meanlog, SI_sdlog, detectionD) {
introductions <- 1 # for tracking introductions
outbreak_size <- c() # for tracking successful outbreak sizes
while(length(outbreak_size) < N) { # simulate outbreaks until the correct number are reached!
outbreak <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, detectionD) # simulate
outbreak_detected <- length(which(outbreak$transD >= detectionD)) # find out if detected
print(outbreak_detected) # print!
if(outbreak_detected > 0) { # if outbreak persistent record outbrea size and plot outbreak time series
outbreak_size <- c(outbreak_size, length(which(outbreak$infD < detectionD)))
}
introductions <- introductions + 1 # increment introductions!
}
}
undetected(10, R0, dispersion, SI_meanlog, SI_sdlog, 100)
introductions
outbreak_size
list(introductions, outbreak_size)
outbreak_info <- list(introductions = introductions,
outbreak_size = outbreak_size)
outbreak_info
#______________________________________________________________________
# Set up N outbreak simulations that exceed the last day detection!
undetected <- function(N, R0, dispersion, SI_meanlog, SI_sdlog, detectionD) {
introductions <- 1 # for tracking introductions
outbreak_size <- c() # for tracking successful outbreak sizes
while(length(outbreak_size) < N) { # simulate outbreaks until the correct number are reached!
outbreak <- outbreak_sim(R0, dispersion, SI_meanlog, SI_sdlog, detectionD) # simulate
outbreak_detected <- length(which(outbreak$transD >= detectionD)) # find out if detected
print(outbreak_detected) # print!
if(outbreak_detected > 0) { # if outbreak persistent record outbrea size and plot outbreak time series
outbreak_size <- c(outbreak_size, length(which(outbreak$infD < detectionD)))
}
introductions <- introductions + 1 # increment introductions!
}
outbreak_info <- list(introductions = introductions,
outbreak_size = outbreak_size)
return(outbreak_info)
}
set.seed(14)
undetected(10, R0, dispersion, SI_meanlog, SI_sdlog, 100)
undetected(10, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff1_5)
undetect1 <- undetected(10, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff1_5)
undetect1$outbreak_size
quantile(undetect1$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
mean(undetect1$outbreak_size) #716.124
undetect1 <- undetected(1000, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff1_5)
undetect1$introductions
quantile(undetect1$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
mean(undetect1$outbreak_size) #716.124
# lineage 3 -----------------------------------------------
timeDiff3 = as.numeric(difftime(as.Date("2022-11-14"), as.Date("2022-06-26"),
units = "days"))
timeDiff3
undetect3 <- undetected(1000, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff3)
undetect3$introductions
quantile(undetect3$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
mean(undetect3$outbreak_size) #716.124
##if cluster 1 is actually two separate introductions:--------------------
#lineage 1 alone -----------------------------------------------
timeDiff1 = as.numeric(difftime(as.Date("2022-09-30"), #detection date of first case in lineage
as.Date("2022-09-24"), #tMRCA of lineage
units = "days"))
undetect1 <- undetected(1000, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff1)
undetect1$introductions
quantile(undetect1$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
mean(undetect1$outbreak_size) #716.124
#lineage 5 alone -----------------------------------------------
timeDiff5 = as.numeric(difftime(as.Date("2022-12-25"), as.Date("2022-08-26"),
units = "days"))
undetect5 <- undetected(1000, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff5)
undetect5$introductions
quantile(undetect5$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
mean(undetect5$outbreak_size) #716.124
timeDiff1_5 = as.numeric(difftime(as.Date("2022-09-30"), #detection date of first case in lineage
as.Date("2021-07-28"), #tMRCA of lineage
units = "days"))
undetect1_5 <- undetected(1000, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff1_5)
undetect1_5$introductions # 4676
quantile(undetect1_5$outbreak_size, c(0.025, 0.5, 0.975)) # 31, 493, 3616
mean(undetect1_5$outbreak_size) # 830
quantile(undetect1_5$outbreak_size, c(0.025, 0.5, 0.975)) # 31, 493, 3616
quantile(undetect3$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
quantile(undetect1$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
timeDiff1
timeDiff1 = as.numeric(difftime(as.Date("2022-09-30"), #detection date of first case in lineage
as.Date("2022-09-24"), #tMRCA of lineage
units = "days"))
undetect1 <- undetected(1000, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff1)
undetect1$introductions
undetect1$introductions
undetect1$outbreak_size
quantile(undetect5$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
source("simulate_helper_fun.R")
# cluster 1 (inc. lineages 1 and 5) ------------------------------------------
undetect1_5 <- undetected(1000, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff1_5)
undetect1_5$introductions # 4676
quantile(undetect1_5$outbreak_size, c(0.025, 0.5, 0.975)) # 31, 493, 3616
mean(undetect1_5$outbreak_size) # 830
# lineage 3 -----------------------------------------------
undetect3 <- undetected(1000, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff3)
undetect3$introductions
quantile(undetect3$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
mean(undetect3$outbreak_size) #716.124
##if cluster 1 is actually two separate introductions:--------------------
#lineage 1 alone -----------------------------------------------
undetect1 <- undetected(1000, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff1)
undetect1$introductions
quantile(undetect1$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
mean(undetect1$outbreak_size) #716.124
#lineage 5 alone -----------------------------------------------
undetect5 <- undetected(1000, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff5)
undetect5$introductions
quantile(undetect5$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
mean(undetect5$outbreak_size) #716.124
timeDiff1_5
timeDiff1_5/ 365
pop <- 164012
gr <- 1.023
yrs <- 2015:2024
pop2015_2024 <- pop * gr^(0:length(yrs))
hdr <- 6
dogs2015_2024 <- pop2015_2024/hdr
dogs <- dogs2015_2024[which(yrs == 2021)]
dog_inc <- 0.01
max_cases <- dogs * (timeDiff1_5/ 365) * dog_inc
max_cases
which(undetect1_5$outbreak_size < max_cases)
plausible <- which(undetect1_5$outbreak_size < max_cases)
length(plausib;e)
length(plausible)
quantile(plausible$outbreak_size, c(0.025, 0.5, 0.975)) # 31, 493, 3616
plausible <- which(undetect1_5$outbreak_size < max_cases)
quantile(undetect1_5$outbreak_size[plausible], c(0.025, 0.5, 0.975)) # 31, 493, 3616
mean(undetect1_5$outbreak_size[plausible]) # 830
undetect3 <- undetected(1000, R0, dispersion, SI_meanlog, SI_sdlog, timeDiff3)
undetect3$introductions
quantile(undetect3$outbreak_size, c(0.025, 0.5, 0.975)) #34, 3007.975
mean(undetect3$outbreak_size) #716.124
quantile(undetect1_5$outbreak_size[plausible], c(0.025, 0.5, 0.975)) # 31, 493, 3616
774 + (1089 + 737) + 1653 + 1251
774 + (1089 + 737) + 1515 + 1251
774 + (1089 + 737) + 1515 + 1165
ggsave("Figs/fig3_zoom2.pdf", plot = fig3_zoom2, width = 12, height = 10, units="in")
ggsave("Figs/fig3_zoom2.pdf", plot = fig3_zoom2, width = 12, height = 10, units="in")
# Alternative:
layout <- "
AAAAAABBBBB
AAAAAABBBBB
AAAAAABBBBB
AAAAAABBBBB
CCCCCCBBBBB
CCCCCCBBBBB
CCCCCCBBBBB
CCCCCCBBBBB
"
fig3 <- epicurve +
wrap_elements(tree_col_by_membership_id_labels) +
map_w_cases  +
plot_layout(design = layout)
4*180
400-700
pop <- 164012
gr <- 1.023
yrs <- 2015:2024
pop2015_2024 <- pop * gr^(0:length(yrs))
hdr <- 6
dogs2015_2024 <- pop2015_2024/hdr
dogs <- dogs2015_2024[which(yrs == 2021)]
dogs
